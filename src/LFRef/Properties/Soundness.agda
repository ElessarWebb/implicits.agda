module LFRef.Properties.Soundness where

open import Data.Nat
open import Data.Sum
open import Data.Product as Pr
open import Data.List
open import Data.Vec hiding (_‚à∑ ≥_)
open import Data.Star
open import Function
open import Extensions.List

open import Relation.Binary.PropositionalEquality as P
open import Relation.Binary.Core using (REL; Reflexive)
open import Relation.Binary.List.Pointwise hiding (refl)

open import LFRef.Syntax
open import LFRef.Welltyped
open import LFRef.Eval

progress : ‚àÄ {ùïä Œ£ A} {e : Exp 0} {Œº} ‚Üí
           ùïä , Œ£ , [] ‚ä¢ Œº ‚Üí
           ùïä , Œ£ , [] ‚ä¢‚Çë e ‚à∂ A ‚Üí
           --------------------------------------
           Val e ‚äé ‚àÉ‚ÇÇ Œª e' Œº' ‚Üí (e , Œº ‚âª e' , Œº')

progress p (tm unit) = inj‚ÇÅ unit
progress p (tm (var ()))
progress p (tm (loc x)) = inj‚ÇÅ (loc _)

progress p (lett x e) with progress p x
progress p (lett {_} {tm x} wtx e) | inj‚ÇÅ _ = inj‚ÇÇ (, (, lett-Œ≤))
progress p (lett {_} {∆õ _ _} wtx e) | inj‚ÇÅ ()
progress p (lett {_} {_ ¬∑ _} wtx e) | inj‚ÇÅ ()
progress p (lett {_} {lett x x‚ÇÅ} wtx e) | inj‚ÇÅ ()
progress p (lett {_} {ref x} wtx e) | inj‚ÇÅ ()
progress p (lett {_} { ! x } wtx e) | inj‚ÇÅ ()
progress p (lett {_} {x ‚âî x‚ÇÅ} wtx e) | inj‚ÇÅ ()
progress p (lett x e) | inj‚ÇÇ (x' , Œº' , step) = inj‚ÇÇ (, (, lett-clos‚ÇÅ step))

progress p (ref e) with progress p e
progress p (ref {_} {tm x} e) | inj‚ÇÅ v = inj‚ÇÇ (, (, ref-val))
progress p (ref {_} {∆õ _ _} e) | inj‚ÇÅ ()
progress p (ref {_} {_ ¬∑ _} e) | inj‚ÇÅ ()
progress p (ref {_} {lett x x‚ÇÅ} e) | inj‚ÇÅ ()
progress p (ref {_} {ref x} e) | inj‚ÇÅ ()
progress p (ref {_} { ! x } e) | inj‚ÇÅ ()
progress p (ref {_} {x ‚âî x‚ÇÅ} e) | inj‚ÇÅ ()
progress p (ref e) | inj‚ÇÇ (e' , Œº' , step) = inj‚ÇÇ (, (, ref-clos step))

progress p (!_ {x = x} e) with progress p e
progress p (!_ {_} {tm .(loc _)} (tm (loc x))) | inj‚ÇÅ (loc i) =
  inj‚ÇÇ (, (, !-val (P.subst (_<_ _) (pointwise-length p) ([-]=-length x))))
progress p (!_ {_} {tm (var _)} e) | inj‚ÇÅ ()
progress p (!_ {_} {∆õ _ _} e) | inj‚ÇÅ ()
progress p (!_ {_} {_ ¬∑ _} e) | inj‚ÇÅ ()
progress p (!_ {_} {lett x x‚ÇÅ} e) | inj‚ÇÅ ()
progress p (!_ {_} {ref x} e) | inj‚ÇÅ ()
progress p (!_ {_} { ! x } e) | inj‚ÇÅ ()
progress p (!_ {_} {x ‚âî x‚ÇÅ} e) | inj‚ÇÅ ()
progress p (! e) | inj‚ÇÇ y = {!!}

progress p (∆õ x‚ÇÅ x‚ÇÇ) = {!!}
progress p (x ¬∑ x‚ÇÅ) = {!!}
progress p (x‚ÇÅ ‚âî x‚ÇÇ) = {!!}
