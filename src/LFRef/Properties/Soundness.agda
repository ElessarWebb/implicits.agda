module LFRef.Properties.Soundness where

open import Data.Nat
open import Data.Sum
open import Data.Product as Pr
open import Data.List
open import Data.Vec hiding (_‚à∑ ≥_)
open import Data.Star
open import Function
open import Extensions.List

open import Relation.Binary.PropositionalEquality as P
open import Relation.Binary.Core using (REL; Reflexive)
open import Relation.Binary.List.Pointwise hiding (refl)

open import LFRef.Syntax
open import LFRef.Welltyped
open import LFRef.Eval

progress : ‚àÄ {ùïä Œ£ A} {e : Exp 0} {Œº} ‚Üí
           ùïä , Œ£ , [] ‚ä¢ Œº ‚Üí
           ùïä , Œ£ , [] ‚ä¢‚Çë e ‚à∂ A ‚Üí
           --------------------------------------
           Val e ‚äé ‚àÉ‚ÇÇ Œª e' Œº' ‚Üí (ùïä ‚ä¢ e , Œº ‚âª e' , Œº')

progress p (tm (con k ts)) = inj‚ÇÅ tm
progress p (tm unit) = inj‚ÇÅ tm
progress p (tm (var ()))
progress p (tm (loc x)) = inj‚ÇÅ tm

progress p (lett x e) with progress p x
progress p (lett (tm x) e) | inj‚ÇÅ tm = inj‚ÇÇ (, (, lett-Œ≤))
progress p (lett (lett wtx wtx‚ÇÅ) e) | inj‚ÇÅ ()
progress p (lett (ref wtx) e) | inj‚ÇÅ ()
progress p (lett (! wtx) e) | inj‚ÇÅ ()
progress p (lett (wtx ‚âî wtx‚ÇÅ) e) | inj‚ÇÅ ()
progress p (lett x e) | inj‚ÇÇ (x' , Œº' , step) = inj‚ÇÇ (, (, lett-clos step))

progress p (ref e) with progress p e
progress p (ref {_} {tm x} e) | inj‚ÇÅ v = inj‚ÇÇ (, (, ref-val))
progress p (ref {_} {_ ¬∑‚òÖ _} e) | inj‚ÇÅ ()
progress p (ref {_} {lett x x‚ÇÅ} e) | inj‚ÇÅ ()
progress p (ref {_} {ref x} e) | inj‚ÇÅ ()
progress p (ref {_} { ! x } e) | inj‚ÇÅ ()
progress p (ref {_} {x ‚âî x‚ÇÅ} e) | inj‚ÇÅ ()
progress p (ref e) | inj‚ÇÇ (e' , Œº' , step) = inj‚ÇÇ (, (, ref-clos step))

progress p (!_ {x = x} e) with progress p e
progress p (!_ {_} {tm .(loc _)} (tm (loc x))) | inj‚ÇÅ tm =
  inj‚ÇÇ (, (, !-val (P.subst (_<_ _) (pointwise-length p) ([-]=-length x))))
progress p (!_ {_} {tm (var ())} e) | _
progress p (!_ {_} {_ ¬∑‚òÖ _} e) | inj‚ÇÅ ()
progress p (!_ {_} {lett x x‚ÇÅ} e) | inj‚ÇÅ ()
progress p (!_ {_} {ref x} e) | inj‚ÇÅ ()
progress p (!_ {_} { ! x } e) | inj‚ÇÅ ()
progress p (!_ {_} {x ‚âî x‚ÇÅ} e) | inj‚ÇÅ ()
progress p (! e) | inj‚ÇÇ (e' , Œº' , step) = inj‚ÇÇ (, (, !-clos step))

progress p (l ‚âî e) with progress p l | progress p e
progress p (tm (loc x) ‚âî tm x‚ÇÅ) | inj‚ÇÅ tm | (inj‚ÇÅ v‚ÇÇ) =
  inj‚ÇÇ (, (, ‚âî-val (P.subst (_<_ _) (pointwise-length p) ([-]=-length x))))
progress p (tm (var ()) ‚âî e) | inj‚ÇÅ _ | inj‚ÇÅ _
progress p ((lett _ _) ‚âî _) | inj‚ÇÅ () | _
progress p ((! _) ‚âî _) | inj‚ÇÅ () | _
progress p ((ref _) ‚âî _) | inj‚ÇÅ () | _
progress p (l ‚âî lett e e‚ÇÅ) | inj‚ÇÅ tm | (inj‚ÇÅ ())
progress p (l ‚âî ref e) | inj‚ÇÅ tm | (inj‚ÇÅ ())
progress p (l ‚âî (! e)) | inj‚ÇÅ tm | (inj‚ÇÅ ())
progress p (l ‚âî (e ‚âî e‚ÇÅ)) | inj‚ÇÅ tm | (inj‚ÇÅ ())
progress p (l ‚âî e) | inj‚ÇÇ (_ , _ , step) | _ = inj‚ÇÇ (, (, ‚âî-clos‚ÇÅ step))
progress p (l ‚âî e) | _ | (inj‚ÇÇ (_ , _ , step)) = inj‚ÇÇ (, (, ‚âî-clos‚ÇÇ step))

‚âª-preserves : ‚àÄ {n Œì ùïä Œ£ A} {e : Exp n} {e' Œº' Œº} ‚Üí
              ùïä , Œ£ , Œì ‚ä¢‚Çë e ‚à∂ A ‚Üí
              ùïä , Œ£ , Œì ‚ä¢ Œº ‚Üí
              ùïä ‚ä¢ e , Œº ‚âª e' , Œº' ‚Üí
              -------------------------------------------------------
              ‚àÉ Œª Œ£' ‚Üí ùïä , Œ£' , Œì ‚ä¢‚Çë e' ‚à∂ A √ó Œ£' ‚äí Œ£ √ó ùïä , Œ£' , Œì ‚ä¢ Œº'
‚âª-preserves (tm x) q ()
‚âª-preserves (lett p p‚ÇÅ) q lett-Œ≤ = {!!}
‚âª-preserves (lett p p‚ÇÅ) q (lett-clos step) = {!!}
‚âª-preserves (ref p) q ref-val = {!!}
‚âª-preserves (ref p) q (ref-clos step) = {!!}
‚âª-preserves (! p‚ÇÅ) q (!-val p) = {!!}
‚âª-preserves (! p) q (!-clos step) = {!!}
‚âª-preserves (p‚ÇÅ ‚âî p‚ÇÇ) q (‚âî-val p) = {!!}
‚âª-preserves (p ‚âî p‚ÇÅ) q (‚âî-clos‚ÇÅ step) = {!!}
‚âª-preserves (p ‚âî p‚ÇÅ) q (‚âî-clos‚ÇÇ step) = {!!}
